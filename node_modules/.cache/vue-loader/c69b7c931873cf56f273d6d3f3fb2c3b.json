{"remainingRequest":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/erevnauser/workspace/belajar/kozii-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/erevnauser/workspace/belajar/kozii-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erevnauser/workspace/belajar/kozii-web/src/components/ExploreKozii.vue?vue&type=template&id=53c08313&","dependencies":[{"path":"/Users/erevnauser/workspace/belajar/kozii-web/src/components/ExploreKozii.vue","mtime":1624952766353},{"path":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}