{"remainingRequest":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/erevnauser/workspace/belajar/kozii-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/erevnauser/workspace/belajar/kozii-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erevnauser/workspace/belajar/kozii-web/src/components/Footer.vue?vue&type=template&id=40ab164b&","dependencies":[{"path":"/Users/erevnauser/workspace/belajar/kozii-web/src/components/Footer.vue","mtime":1624960822932},{"path":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erevnauser/workspace/belajar/kozii-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}